package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.LivingUpdateEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.network.PacketEvent.Type;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;

@Register(name = "PingSpoof", category = Category.Exploit)
public class PingSpoof extends Module {

	private List<Packet<?>> keep = new ArrayList<>();

	private ModeValue mode = new ModeValue("Mode", "Tick", "Tick");
	private SliderValue ticking = new SliderValue("Ticks", 10, 1, 20, 1);

	public PingSpoof() {
		this.registerSetting(mode, ticking);
	}
	
	@EventLink
	public void onGui(ClickGuiEvent e) {
	    AtomicReference<String> suffixRef = new AtomicReference<>();

	    if (mode.is("Tick")) {
	        suffixRef.set(ticking.getInput() + " ticks");
	    }
	    
	    this.setSuffix(suffixRef.get());
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		Packet<?> p = e.getPacket();

		if (e.getType() == Type.SEND) {
			if (p instanceof C00PacketKeepAlive) {
				if (mode.is("Tick")) {
					keep.add(p);
					e.setCancelled(true);
				}
			}
		}
	}

	@EventLink
	public void onLiving(LivingUpdateEvent e) {
		if (PlayerUtil.inGame()) {
			if (mode.is("Tick") && mc.thePlayer.ticksExisted % ticking.getInput() == 0 && !keep.isEmpty()) {
				Iterator<?> var1 = keep.iterator();
				while(var1.hasNext()) {
					Packet<?> keeping = (Packet<?>) var1.next();
					if (keeping != null) {
						PacketUtil.sendPacketNoEvent(keeping);
					}
				}
			}
		}
	}
}
