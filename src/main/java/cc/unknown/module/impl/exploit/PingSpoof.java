package cc.unknown.module.impl.exploit;

import static cc.unknown.utils.player.PlayerUtil.inGame;

import java.util.ArrayList;

import cc.unknown.event.impl.api.EventLink;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.event.impl.packet.PacketType;
import cc.unknown.event.impl.render.Render3DEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.ModuleCategory;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.AdvancedTimer;
import cc.unknown.utils.helpers.MathHelper;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.network.packets.KeepAliveS2CPacket;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;

public class PingSpoof extends Module {
	
	private final ArrayList<KeepAliveS2CPacket> s2c = new ArrayList<>();
    private ArrayList<C00PacketKeepAlive> packets = new ArrayList<C00PacketKeepAlive>();
    private Packet<?> sendPacket = null;
    private AdvancedTimer timer = new AdvancedTimer(0);
	
	private ModeValue mode = new ModeValue("Mode", "Null Ping", "Normal", "Null Ping");
	private SliderValue delay = new SliderValue("Delay", 1900, 0, 1900, 1);
	
	public PingSpoof() {
		super("PingSpoof", ModuleCategory.Exploit);
		this.registerSetting(mode, delay);
	}
	
	@EventLink
    public void onPacket(PacketEvent e) {
		switch(mode.getMode()) {
        case "Normal":
            if (e.getType() == PacketType.Send) {
        		if (e.getPacket() instanceof C00PacketKeepAlive) {
        			C00PacketKeepAlive c00 = (C00PacketKeepAlive)e.getPacket();
        			s2c.add(new KeepAliveS2CPacket(c00.getKey(), (long) ((double)System.currentTimeMillis() + delay.getInput() + (double)MathHelper.nextLong(0L, 200L))));
        			e.setCancelled(true);
        		}
            }
            break;
        case "Null Ping":
        	if (e.getType() == PacketType.Send) {
	            if (sendPacket != null && e.getPacket() instanceof C00PacketKeepAlive && e.getPacket() == sendPacket) {
	                sendPacket = null;
	            } else if (e.getPacket() instanceof C00PacketKeepAlive) {
	                packets.add(e.getPacket());
	                e.setCancelled(true);
	            }
        	}
        	break;
		}
	}
	
	@EventLink
	public void onRender3D(Render3DEvent e) {
		switch(mode.getMode()) {
		case "Normal":
			if (inGame() && !s2c.isEmpty()) {
				ArrayList<KeepAliveS2CPacket> toRemove = new ArrayList<>();
				for(KeepAliveS2CPacket packet : s2c) {
					if (packet.getTime() < System.currentTimeMillis()) {
						PacketUtil.sendPacketNoEvent(new C00PacketKeepAlive(packet.getKey()));
						toRemove.add(packet);
					}
				}
				s2c.removeIf(toRemove::contains);
			}
			break;
        case "Null Ping":
            if (timer.hasTimeElapsed(7000L, true) && packets.size() >= 1) {
                sendPacket = packets.get(0);
                PacketUtil.sendPacketNoEvent(packets.get(0));
                packets.remove(0);
            }
        	break;
		}
	}
}
