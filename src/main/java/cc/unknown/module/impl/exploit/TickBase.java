package cc.unknown.module.impl.exploit;

import cc.unknown.Haru;
import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.PostUpdateEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.impl.combat.AimAssist;
import cc.unknown.module.setting.impl.DoubleSliderValue;
import cc.unknown.module.setting.impl.SliderValue;
import net.minecraft.entity.Entity;

@Register(name = "TickBase", category = Category.Exploit)
public class TickBase extends Module {

	private DoubleSliderValue range = new DoubleSliderValue("Range", 5, 6, 0, 10, 1);
	private SliderValue delay = new SliderValue("Delay", 1, 0, 1, 0.1);
	private SliderValue duration = new SliderValue("Duration", 0.1, 0, 1, 0.1);
	private SliderValue timer = new SliderValue("Timer", 5, 1, 20, 1);
	private SliderValue maxTicks = new SliderValue("Max Ticks per Use", 20, 1, 100, 1);
	private SliderValue storeTicks = new SliderValue("Store Ticks", 40, 10, 100, 1);

	public TickBase() {
		this.registerSetting(range, delay, duration, timer, maxTicks, storeTicks);
	}

	private int delayTicks = 0, useTicks = 0;

	@Override
	public void onEnable() {
		super.onEnable();
	}

	@EventLink
	public void onPost(PostUpdateEvent e) {
		AimAssist c = (AimAssist) Haru.instance.getModuleManager().getModule(AimAssist.class);

		Entity target;
		target = c.getEnemy();

		if (target == null) {
			reset();
			return;
		}
		
		double dist = range.getInputMaxToFloat();
		double minDist = range.getInputMinToFloat();
		if (mc.thePlayer.getDistanceSqToEntity(target) > dist || mc.thePlayer.getDistanceSqToEntity(target) < minDist) {
			reset();
			return;
		}

		delayTicks++;
		if (delayTicks > (int) (delay.getInputToFloat() * 30)) {
			mc.timer.timerSpeed = timer.getInputToFloat();
			useTicks++;

			if (useTicks > maxTicks.getInputToInt()) {
				reset();
			}
		} else {
			mc.timer.timerSpeed = 1f;
		}
	}

	private void reset() {
		mc.timer.timerSpeed = 1f;
		delayTicks = 0;
		useTicks = 0;
	}

	@Override
	public void onDisable() {
		mc.timer.timerSpeed = 1.0f;
		super.onDisable();
	}

}
