package cc.unknown.module.impl.exploit;

import java.awt.Color;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.PreUpdateEvent;
import cc.unknown.event.impl.network.DisconnectionEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.network.PacketEvent.Type;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.event.impl.player.TickEvent;
import cc.unknown.event.impl.render.Render3DEvent;
import cc.unknown.event.impl.world.WorldEvent;
import cc.unknown.mixin.interfaces.network.packets.IC02PacketUseEntity;
import cc.unknown.mixin.interfaces.network.packets.IS14PacketEntity;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.ui.clickgui.raven.impl.api.Theme;
import cc.unknown.utils.client.RenderUtil;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.network.TimedPacket;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S40PacketDisconnect;
import net.minecraft.util.Vec3;

@Register(name = "BackTrack", category = Category.Exploit)
public class BackTrack extends Module {

	private SliderValue latency = new SliderValue("Latency delay", 400, 20, 1000, 20);
	private SliderValue enemyDistance = new SliderValue("Enemy distance", 6.0, 3.1, 6.0, 0.1);
	private BooleanValue onlyCombat = new BooleanValue("Enable only during combat", true);
	private BooleanValue renderRealPlayerPosition = new BooleanValue("Render player position", true);
	private BooleanValue useThemeColor = new BooleanValue("Use themed colors", false);
	private SliderValue boxColor = new SliderValue("Box color [H/S/B]", 0, 0, 350, 10);
	private BooleanValue disableOnWorldChange = new BooleanValue("Disable on world change", false);
	private BooleanValue disableOnDisconnect = new BooleanValue("Disable on disconnect", false);

	private AtomicReference<Queue<TimedPacket>> packetQueue = new AtomicReference<>(new ConcurrentLinkedQueue<>());
	private AtomicInteger attackTicks = new AtomicInteger();
	private AtomicReference<EntityPlayer> target = new AtomicReference<>();
	private Vec3 vec3, lastVec3;

	public BackTrack() {
		this.registerSetting(latency, enemyDistance, onlyCombat, renderRealPlayerPosition, useThemeColor, boxColor,
				disableOnWorldChange, disableOnDisconnect);
	}

	@EventLink
	public void onGui(ClickGuiEvent e) {
		this.setSuffix(latency.getInput() + " ms");
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mc.thePlayer == null) {
			toggle();
			return;
		}

		packetQueue.get().clear();
		vec3 = lastVec3 = null;
		target.set(null);
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mc.thePlayer == null)
			return;

		if (mc.thePlayer != null && !packetQueue.get().isEmpty())
			packetQueue.get().forEach(timedPacket -> {
				PacketUtil.receivePacketNoEvent((Packet<INetHandler>) timedPacket.getPacket());
			});
		packetQueue.get().clear();

	}

	@EventLink
	public void onPre(PreUpdateEvent e) {
		try {
	        attackTicks.incrementAndGet();

			if (attackTicks.get() > 7 || vec3.distanceTo(mc.thePlayer.getPositionVector()) > enemyDistance.getInput()) {
				target.set(null);
				vec3 = lastVec3 = null;
			}

			lastVec3 = vec3;
		} catch (NullPointerException ignored) {

		}
	}

	@EventLink
	public void onPreTick(TickEvent.Pre e) {
		release();
	}

	@EventLink
	public void onRender3D(Render3DEvent event) {
		if (target.get() == null)
			return;

		if (renderRealPlayerPosition.isToggled()) {
			RenderUtil.drawBox(target.get(), vec3, lastVec3, useThemeColor.isToggled() ? Theme.instance.getMainColor()
					: Color.getHSBColor((boxColor.getInputToFloat() % 360) / 360.0f, 1.0f, 1.0f));
		}
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		final Packet<?> p = e.getPacket();

		try {
			if (e.getType() == Type.RECEIVE) {

				if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
					packetQueue.get().clear();
					return;
				}

				if (target.get() == null) {
					releaseAll();
					return;
				}

				if (e.isCancelled())
					return;

				if (p instanceof S19PacketEntityStatus || p instanceof S02PacketChat)
					return;

				if (p instanceof S08PacketPlayerPosLook || p instanceof S40PacketDisconnect) {
					releaseAll();
					target.set(null);
					vec3 = lastVec3 = null;
					return;

				} else if (p instanceof S13PacketDestroyEntities) {
					S13PacketDestroyEntities wrapper = (S13PacketDestroyEntities) p;
					for (int id : wrapper.getEntityIDs()) {
						if (id == target.get().getEntityId()) {
							target.set(null);
							vec3 = lastVec3 = null;
							releaseAll();
							return;
						}
					}
				} else if (p instanceof S14PacketEntity) {
					S14PacketEntity wrapper = (S14PacketEntity) p;
					if (((IS14PacketEntity) wrapper).getEntityId() == target.get().getEntityId()) {
						vec3 = vec3.addVector(wrapper.func_149062_c() / 32.0D, wrapper.func_149061_d() / 32.0D,
								wrapper.func_149064_e() / 32.0D);
					}
				} else if (p instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport wrapper = (S18PacketEntityTeleport) p;
					if (wrapper.getEntityId() == target.get().getEntityId()) {
						vec3 = new Vec3(wrapper.getX() / 32.0D, wrapper.getY() / 32.0D, wrapper.getZ() / 32.0D);
					}
				}

				packetQueue.get().add(new TimedPacket(p));
				e.setCancelled(true);
			}

			if (e.getType() == Type.SEND) {
				if (p instanceof C02PacketUseEntity) {
					C02PacketUseEntity wrapper = (C02PacketUseEntity) p;
					if (onlyCombat.isToggled() && wrapper.getAction() != C02PacketUseEntity.Action.ATTACK)
						return;

					attackTicks.set(0);

					EntityPlayer entity = (EntityPlayer) wrapper.getEntityFromWorld(mc.theWorld);

					if (target.get() != null && ((IC02PacketUseEntity) wrapper).getEntityId() == target.get().getEntityId())
						return;
					target.set(null);
					vec3 = lastVec3 = entity.getPositionVector();
				}
			}
		} catch (NullPointerException | ClassCastException ignorethisshit) {

		}
	}

	@EventLink
	public void onDisconnect(DisconnectionEvent e) {
		if (disableOnDisconnect.isToggled()) {
			this.disable();
		}
	}

	@EventLink
	public void disableOnWorldChange(WorldEvent e) {
		if (disableOnWorldChange.isToggled()) {
			this.disable();
		}
	}

	private void release() {
		while (!packetQueue.get().isEmpty()) {
			if (packetQueue.get().peek().getCold().getCum(latency.getInputToInt())) {
				Packet<?> packet = packetQueue.get().poll().getPacket();
				PacketUtil.receivePacketNoEvent((Packet<INetHandler>) packet);
			} else {
				break;
			}
		}

		if (packetQueue.get().isEmpty() && target != null) {
			vec3 = target.get().getPositionVector();
		}
	}

	private void releaseAll() {
		if (!packetQueue.get().isEmpty()) {
			packetQueue.get().forEach(timedPacket -> {
				PacketUtil.receivePacketNoEvent((Packet<INetHandler>) timedPacket.getPacket());
			});
			packetQueue.get().clear();
		}
	}
}