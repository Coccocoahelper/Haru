package cc.unknown.module.impl.exploit;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.network.PacketEvent.Type;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.event.impl.render.Render3DEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S04PacketEntityEquipment;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S19PacketEntityStatus;

@Register(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private SliderValue packetDelay = new SliderValue("Packet delay", 200, 25, 1000, 5);
	private ConcurrentHashMap<Packet<INetHandler>, Long> delayedPackets = new ConcurrentHashMap<>();

	public FakeLag() {
		this.registerSetting(packetDelay);
	}

	@EventLink
	public void onGui(ClickGuiEvent e) {
	    this.setSuffix(packetDelay.getInput() + " ms");
	}

	@Override
	public void onEnable() {
		delayedPackets.clear();
	}

	@Override
	public void onDisable() {
		receivePacket(true);
	}

	@EventLink
	public void onRenderTick(Render3DEvent e) {
		if (!PlayerUtil.inGame()) {
			receivePacket(false);
			return;
		}
		receivePacket(true);
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == Type.RECEIVE) {
			long receiveTime = System.currentTimeMillis();
			if (!PlayerUtil.inGame()) {
				receivePacket(false);
				return;
			}
			if (e.isCancelled()) {
				return;
			}
			if (e.getPacket() instanceof S19PacketEntityStatus || e.getPacket() instanceof S02PacketChat
					|| e.getPacket() instanceof S08PacketPlayerPosLook
					|| e.getPacket() instanceof S04PacketEntityEquipment) {
				return;
			}
			delayedPackets.put((Packet<INetHandler>) e.getPacket(), receiveTime);
			e.setCancelled(true);
		}
	}

	private void receivePacket(boolean delay) {
		try {
			Iterator<Map.Entry<Packet<INetHandler>, Long>> packets = delayedPackets.entrySet().iterator();
			while (packets.hasNext()) {
				Map.Entry<Packet<INetHandler>, Long> entry = packets.next();
				Packet<INetHandler> packet = entry.getKey();
				if (packet == null) {
					continue;
				}
				long receiveTime = entry.getValue();
				long ms = System.currentTimeMillis();
				if (getDifference(ms, receiveTime) > packetDelay.getInput() || !delay) {
					PacketUtil.receivePacketNoEvent(packet);
					packets.remove();
				}
			}
		} catch (Exception e) {
		}
	}

	private long getDifference(long n, long n2) {
		return Math.abs(n2 - n);
	}

}
