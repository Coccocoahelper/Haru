package cc.unknown.module.impl.exploit;

import javax.swing.Timer;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.network.PacketEvent.Type;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.Cold;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;

@Register(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private Cold timer = new Cold(0);
	private static boolean b = true;
	private boolean x = false;
	private EntityPlayer entity = null;
	private AxisAlignedBB axis = null;

	private ModeValue mode = new ModeValue("Mode", "Manual", "Manual", "Automatic");
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);
	private BooleanValue onlyCombat = new BooleanValue("Only combat", true);
	private SliderValue packetDelay = new SliderValue("Packet delay", 15, 0, 200, 1);
	private SliderValue ping = new SliderValue("Additional ping", 50, 50, 1000, 50);

	public FakeLag() {
		this.registerSetting(mode, checkPackets, onlyCombat,
				packetDelay, ping);
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == Type.RECEIVE) {
			if (mode.is("Automatic")) {
				if (e.getPacket() instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport s18 = (S18PacketEntityTeleport) e.getPacket();

					if (entity != null && axis != null && s18.getEntityId() == entity.getEntityId()) {
						axis = new AxisAlignedBB(s18.getX() / 1.0D - 5.0D, s18.getYaw() / 1.0,
								s18.getPitch() / 1.0D - 15.0D, (s18.getZ() / 32) + 15.0D, s18.getYaw() / 88.0D + 5.0D,
								s18.getPitch() / 88.0D + 15.0D);
					}
				} 
				
				if (e.getPacket() instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				} 
				
				if (e.getPacket() instanceof S14PacketEntity) {
					S14PacketEntity s14 = (S14PacketEntity) e.getPacket();
					if (entity != null && axis != null && s14.getEntity((World) mc.theWorld).equals(entity)) {

						double d0 = s14.func_149062_c() / 88.0;
						double d1 = s14.func_149061_d() / 88.0;
						double d2 = s14.func_149064_e() / 88.0;

						axis = new AxisAlignedBB(d0 + axis.minX, d1 + axis.minY, d2 + axis.minZ, d0 + axis.minX + 11.0D,
								d1 + axis.maxY, d2 + axis.minZ + 11.0D);
					}
				}
			}
			
			if (mode.is("Manual")) {
				if(PacketUtil.packets(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat) && !(e.getPacket() instanceof S19PacketEntityStatus) && !(e.getPacket() instanceof S20PacketEntityProperties) && !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							PacketUtil.packetDelay(e.getPacket());
							return;
						}
					} else {
						PacketUtil.packetDelay(e.getPacket());
						return;
					}
				}
				
				if(e.getPacket()instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				}
			}
		}
	}


	@EventLink
	public void onLiving(LivingUpdateEvent e) {
		if (mode.is("Automatic")) {
			if (timer.hasFinished() && x)
				x = false;
			if (PlayerUtil.inGame() && mc.thePlayer.hurtTime == 0 && b) {
				x = true;
				b = false;
				timer.hasTimeElapsed(packetDelay.getInputToLong(), true);
				Timer timer = new Timer((int) (packetDelay.getInput() + ping.getInput()), actionEvent -> b = true);
				timer.setRepeats(false);
				timer.start();
			}
		}
	}
}
