package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.List;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.LivingEvent;
import cc.unknown.event.impl.network.DisconnectionEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.network.PacketEvent.Type;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.DescValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C01PacketChatMessage;

@Register(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private ModeValue mode = new ModeValue("Mode", "Latency", "Latency", "Clumsy");
	private SliderValue ticks = new SliderValue("Ticks Existed", 1, 1, 20, 1);
	private BooleanValue c03Pause = new BooleanValue("C03 Pause", true);
	private final List<Packet<?>> packets = new ArrayList<>();

	public FakeLag() {
		this.registerSetting(new DescValue("Testing..."));
		this.registerSetting(mode, ticks, c03Pause);
	}

	@Override
	public void onEnable() {
		synchronized (packets) {
			packets.clear();
		}
	}

	@Override
	public void onDisable() {
		synchronized (packets) {
			PacketUtil.send(packets.toArray(new Packet<?>[0]));
		}
		packets.clear();
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == Type.SEND) {

			synchronized (packets) {
				if (mode.is("Latency") && packets.contains(e.getPacket())) {
					packets.remove(e.getPacket());
					return;
				}

				if (mode.is("Latency")) {
					packets.add(e.getPacket());
					e.setCancelled(true);
					return;
				}

				if (c03Pause.isToggled()) {
					if (e.getPacket() instanceof C03PacketPlayer) {
						packets.add(e.getPacket());
						e.setCancelled(true);
					}
				} else {
					if (!(e.getPacket() instanceof C00PacketKeepAlive)
							&& !(e.getPacket() instanceof C01PacketChatMessage)) {
						packets.add(e.getPacket());
						e.setCancelled(true);
					}
				}
			}
		}
	}

	@EventLink
	public void onLiving(LivingEvent e) {
		if (mode.is("Latency")) {
			List<Packet<?>> c;

			synchronized (packets) {
				c = new ArrayList<>(packets);
				if (mc.thePlayer.ticksExisted % ticks.getInputToInt() == 0) {
					for (int i = 0; i < c.size(); i++) {
						PacketUtil.send(c.get(i));
					}
				}
			}
		}
	}

	@EventLink
	public void onDisconnection(DisconnectionEvent e) {
		this.disable();
	}
}
