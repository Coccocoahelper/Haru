package cc.unknown.module.impl.exploit;

import java.util.concurrent.CopyOnWriteArrayList;

import cc.unknown.Haru;
import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.PostUpdateEvent;
import cc.unknown.event.impl.world.WorldEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.impl.combat.AimAssist;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.player.CombatUtil;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.util.AxisAlignedBB;

@Register(name = "LagRange", category = Category.Exploit)
public class LagRange extends Module {

	private SliderValue leaveRange = new SliderValue("Leave Range", 6, 0, 10, 1);
	private SliderValue minRange = new SliderValue("Min Range", 0, 0, 6, 1);
	private SliderValue range = new SliderValue("Start Range", 3, 0, 6, 1);
	private SliderValue duration = new SliderValue("Max Duration", 0.1, 0, 3, 0.1);
	
	public LagRange() {
		this.registerSetting(leaveRange, minRange, range, duration);
	}
	
	private CopyOnWriteArrayList<Entity> storeEntities = new CopyOnWriteArrayList<>();

	@EventLink
	public void onWorld(WorldEvent e) {
		storeEntities.clear();
		clear();
	}

	private void clear() {
		storeEntities.forEach((entity) -> {
			if (entity == null || !entity.isEntityAlive()) return;
			double x = entity.serverPosX;
			double y = entity.serverPosY;
			double z = entity.serverPosZ;
			entity.setPosition(x, y, z);
		});
		storeEntities.clear();
	}

	@Override
	public void onEnable() {
		clear();
		super.onEnable();
	}
	
	@EventLink
	public void onPost(PostUpdateEvent e) {
		AimAssist aimAssist = (AimAssist) Haru.instance.getModuleManager().getModule(AimAssist.class);
		
		if (mc.theWorld == null || mc.thePlayer == null)
			return;
		
		try {
		int countInRange = 0;
		for (Entity entity : mc.theWorld.getLoadedEntityList()) {
			if (!(entity instanceof EntityPlayerSP))
				return;
			if (aimAssist.getEnemy() != null) {
				AxisAlignedBB afterBB = entity.getCollisionBoundingBox();
				double afterRange = CombatUtil.instance.nearestRotation(afterBB);
				if (afterRange <= aimAssist.distance.getInputToFloat())
					countInRange++;

			}
		}
		
		if (countInRange > 1) {
			clear();
			return;
		}

		if (!storeEntities.isEmpty()) {
			for (Entity entity : storeEntities) {
				double x = entity.serverPosX;
				double y = entity.serverPosY;
				double z = entity.serverPosZ;
				AxisAlignedBB entityBB = new AxisAlignedBB(x - 0.4F, y, z - 0.4F, x + 0.4F, y + 1.7F, z + 0.4F);
				double range = CombatUtil.instance.nearestRotation(entityBB);
				if (range <= minRange.getInputToFloat() || range >= leaveRange.getInputToFloat()) {
					clear();
					break;
				}
			}
		}
		} catch (NullPointerException ex) {

		}
	}
}
