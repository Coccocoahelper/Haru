package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.List;

import cc.unknown.Haru;
import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.MotionEvent;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.impl.combat.AimAssist;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.util.Vec3;

@Register(name = "LagRange", category = Category.Exploit)
public class LagRange extends Module {
	
	private final List<Packet<?>> packets = new ArrayList<>();
	private final List<Vec3> positions = new ArrayList<>();
	private SliderValue onlyCombat = new SliderValue("Lag on Combat", 15, 1, 15, 1);
	private SliderValue packetsLag = new SliderValue("Ticks delay between packets", 15, 1, 100, 1);

	public LagRange() {
		this.registerSetting(onlyCombat, packetsLag);	
	}
	
	@EventLink
	public void onGui(ClickGuiEvent e) {
		this.setSuffix(" - [" + (PlayerUtil.isMoving() ? "\2479" : "\2478") + packets.size() + "]");
	}
	
	@Override
	public void onEnable() {
		super.onEnable();
		if (mc.thePlayer == null) {
			toggle();
			return;
		}
		reset();
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mc.thePlayer == null)
			return;
		reset();
	}
	
	@EventLink
	public void onPost(MotionEvent e) {
		if (e.isPost()) {
			AimAssist aimAssist = (AimAssist) Haru.instance.getModuleManager().getModule(AimAssist.class);
			if (aimAssist.getEnemy() == null) {
				if (mc.thePlayer.ticksExisted % packetsLag.getInputToInt() == 0) {
					PacketUtil.sendPacketNoEvent(packets.get(0));
					
					if (packets.get(0) instanceof C04PacketPlayerPosition) {
						C04PacketPlayerPosition wrapper = (C04PacketPlayerPosition) packets.get(0);
						Vec3 packetPos = new Vec3(wrapper.x, wrapper.y, wrapper.z);
						synchronized (positions) {
							positions.add(packetPos);
						}
					}
					packets.remove(0);
				}
			} else {
				for (Packet<?> packet : packets) {
					PacketUtil.sendPacketNoEvent(packet);
				}
				packets.clear();
			}
		}
	}
	
	private void reset() {
		packets.clear();
		positions.clear();
	}

}
