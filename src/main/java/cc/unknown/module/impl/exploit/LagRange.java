package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.GL11;

import cc.unknown.Haru;
import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.MotionEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.render.RenderEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.impl.combat.AimAssist;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.ui.clickgui.raven.impl.api.Theme;
import cc.unknown.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.Vec3;

@Register(name = "LagRange", category = Category.Exploit)
public class LagRange extends Module {

	private final List<Packet<?>> packets = new ArrayList<>();
	private final List<Vec3> positions = new ArrayList<>();
	private SliderValue packetsLag = new SliderValue("Ticks delay between packets", 2, 1, 20, 1);

	public LagRange() {
		this.registerSetting(packetsLag);
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mc.thePlayer == null) {
			toggle();
			return;
		}
		reset();
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mc.thePlayer == null)
			return;
		reset();
	}
	
	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.isSend()) {
			packets.add(e.getPacket());
			e.setCancelled(true);
		}

	}

	@EventLink
	public void onPost(MotionEvent e) {
		if (e.isPost()) {
			this.setSuffix(" - [" + packets.size() + "]");
			AimAssist aimAssist = (AimAssist) Haru.instance.getModuleManager().getModule(AimAssist.class);
			if (aimAssist.getEnemy() == null) {
				if (!packets.isEmpty() && mc.thePlayer.ticksExisted % packetsLag.getInputToInt() == 0) {
					Packet<?> packet = packets.get(0);
					if (packet instanceof C03PacketPlayer.C04PacketPlayerPosition) {
						C03PacketPlayer.C04PacketPlayerPosition wrapper = (C03PacketPlayer.C04PacketPlayerPosition) packet;
						Vec3 packetPos = new Vec3(wrapper.x, wrapper.y, wrapper.z);
						synchronized (positions) {
							positions.add(packetPos);
						}
					}
					PacketUtil.sendPacketNoEvent(packet);
					packets.remove(0);
				}
			} else {
				for (Packet<?> packet : packets) {
					PacketUtil.sendPacketNoEvent(packet);
				}
				packets.clear();
			}
		}
	}

	@EventLink
	public void onRender3D(RenderEvent e) {
		if (e.is3D()) {
			synchronized (positions) {
				GL11.glPushMatrix();
				GL11.glDisable(GL11.GL_TEXTURE_2D);
				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
				GL11.glEnable(GL11.GL_LINE_SMOOTH);
				GL11.glEnable(GL11.GL_BLEND);
				GL11.glDisable(GL11.GL_DEPTH_TEST);
				mc.entityRenderer.disableLightmap();
				GL11.glBegin(GL11.GL_LINE_STRIP);
				GL11.glColor4f(Theme.instance.getMainColor().getRed() / 255.0f,
						Theme.instance.getMainColor().getGreen() / 255.0f,
						Theme.instance.getMainColor().getBlue() / 255.0f,
						Theme.instance.getMainColor().getAlpha() / 255.0f);

				double renderPosX = mc.getRenderManager().viewerPosX;
				double renderPosY = mc.getRenderManager().viewerPosY;
				double renderPosZ = mc.getRenderManager().viewerPosZ;

				for (Vec3 pos : positions) {
					GL11.glVertex3d(pos.xCoord - renderPosX, pos.yCoord - renderPosY, pos.zCoord - renderPosZ);
				}

				GL11.glColor4d(1.0, 1.0, 1.0, 1.0);
				GL11.glEnd();
				GL11.glEnable(GL11.GL_DEPTH_TEST);
				GL11.glDisable(GL11.GL_LINE_SMOOTH);
				GL11.glDisable(GL11.GL_BLEND);
				GL11.glEnable(GL11.GL_TEXTURE_2D);
				GL11.glPopMatrix();

			}
		}
	}

	private void reset() {
		packets.clear();
		positions.clear();
	}

}
