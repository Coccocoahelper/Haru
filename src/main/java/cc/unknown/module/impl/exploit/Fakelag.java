package cc.unknown.module.impl.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Timer;

import org.lwjgl.opengl.GL11;

import cc.unknown.Haru;
import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.UpdateEvent;
import cc.unknown.event.impl.other.ShutdownEvent;
import cc.unknown.event.impl.other.StartGameEvent;
import cc.unknown.event.impl.other.WorldEvent;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.event.impl.packet.PacketType;
import cc.unknown.event.impl.player.PreTickEvent;
import cc.unknown.event.impl.render.Render3DEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.ModuleCategory;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.ui.clickgui.raven.theme.Theme;
import cc.unknown.utils.client.AdvancedTimer;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

public class Fakelag extends Module {

	private ModeValue mode = new ModeValue("Mode", "Tick", "Tick", "Manual", "Automatic");
	private SliderValue dynamicTick = new SliderValue("Ticks", 3, 1, 25, 1);
	private BooleanValue legitimize = new BooleanValue("Legitimize", true);
	private SliderValue packetDelay = new SliderValue("Packet delay", 15, 5, 20, 1);
	private SliderValue ping = new SliderValue("Additional ping", 88.5, 3.5, 95.5, 0.5);
	private BooleanValue onWorld = new BooleanValue("Disable on World", true);
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);	

	private final ArrayList<Packet<INetHandler>> packets = new ArrayList<>();
	private AdvancedTimer timer = new AdvancedTimer(0);
	private static boolean b = true;
	private boolean x = false;
	private EntityPlayer entity = null;
	private AxisAlignedBB axis = null;

	public Fakelag() {
		super("FakeLag", ModuleCategory.Exploit);
		this.registerSetting(mode, checkPackets, onWorld, dynamicTick, legitimize, packetDelay, ping);
	}

	@Override
	public void onEnable() {
		if (mode.is("Tick")) {
	        synchronized (packets) {
	            packets.clear();
	        }
		}
	}

	@Override
	public void onDisable() {
		if (mode.is("Tick")) {
	        List<Packet<?>> c;
	        synchronized (packets) {
	            c = new ArrayList<>(packets);
	            packets.clear();
	        }

	        for (Packet<?> packet : c) {
	            PacketUtil.sendPacketNoEvent(packet);
	        }
		}
	}
	
	@EventLink
	public void onUpdate(UpdateEvent e) {
		if (mode.is("Tick")) {
			List<Packet<?>> c;
			
            synchronized (packets) {
                c = new ArrayList<>(packets);
                if (mc.thePlayer.ticksExisted % dynamicTick.getInput() == 0) {
                    for (int i = 0; i < c.size(); i++) {
                        PacketUtil.send(c.get(i));
                    }
                }
            }
		}
	}

	@EventLink
	public void onWorld(WorldEvent e) {
    	if (onWorld.isToggled()) {
    		this.disable();
    	}
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == PacketType.Receive) {
			if (mode.is("Manual")) {
				if (PacketUtil.packets(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat)
								&& !(e.getPacket() instanceof S19PacketEntityStatus)
								&& !(e.getPacket() instanceof S20PacketEntityProperties)
								&& !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							PacketUtil.packetDelay(e.getPacket());
							return;
						}
					} else {
						PacketUtil.packetDelay(e.getPacket());
						return;
					}
				}
			}

			if (mode.is("Automatic")) {
				if (e.getPacket() instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport s18 = (S18PacketEntityTeleport) e.getPacket();

					if (entity != null && axis != null && s18.getEntityId() == entity.getEntityId()) {
						axis = new AxisAlignedBB(s18.getX() / 1.0D - 5.0D, s18.getYaw() / 1.0,
								s18.getPitch() / 1.0D - 15.0D, (s18.getZ() / 32) + 15.0D, s18.getYaw() / 88.0D + 5.0D,
								s18.getPitch() / 88.0D + 15.0D);
					}
				}

				if (e.getPacket() instanceof S14PacketEntity) {
					S14PacketEntity s14 = (S14PacketEntity) e.getPacket();
					if (entity != null && axis != null && s14.getEntity((World) mc.theWorld).equals(entity)) {

						double d0 = s14.func_149062_c() / 88.0;
						double d1 = s14.func_149061_d() / 88.0;
						double d2 = s14.func_149064_e() / 88.0;

						axis = new AxisAlignedBB(d0 + axis.minX, d1 + axis.minY, d2 + axis.minZ, d0 + axis.minX + 11.0D,
								d1 + axis.maxY, d2 + axis.minZ + 11.0D);
					}
				}
			}
		}

		if (e.getType() == PacketType.Send) {
			if (mode.is("Tick")) {
	            synchronized (packets) {
	                if (mode.is("Tick") && packets.contains(e.getPacket())) {
	                    packets.remove(e.getPacket());
	                    return;
	                }

	                if (mode.is("Tick")) {
	                    packets.add(e.getPacket());
	                    e.setCancelled(true);
	                    return;
	                }

	                if (legitimize.isToggled()) {
	                    if (e.getPacket() instanceof C03PacketPlayer) {
	                        packets.add(e.getPacket());
	                        e.setCancelled(true);
	                    }
	                } else {
	                    if (!e.getPacket().getClass().getSimpleName().startsWith("S") && !(e.getPacket() instanceof C00PacketKeepAlive)) {
	                        packets.add(e.getPacket());
	                        e.setCancelled(true);
	                    }
	                }
	            }
			}
		}
	}

	@EventLink
	public void onPreTick(PreTickEvent e) {
		if (mode.is("Automatic")) {
			if (timer.hasFinished() && x)
				x = false;
			if (PlayerUtil.inGame() && mc.thePlayer.hurtTime == 0 && b) {
				x = true;
				b = false;
				timer.hasTimeElapsed(packetDelay.getInputToLong(), true);
				Timer timer = new Timer((int) (packetDelay.getInput() + ping.getInput()), actionEvent -> b = true);
				timer.setRepeats(false);
				timer.start();
			}
		}
	}
	
	@EventLink
	public void onRender3D(Render3DEvent e) {
		if (entity == null) {
			return;
		}
		try {
			if (this.entity != null && this.entity != mc.thePlayer) {
				final double x = Haru.instance.realPosX / 32.0D - mc.getRenderManager().renderPosX;
				final double y = Haru.instance.realPosY / 32.0D - mc.getRenderManager().renderPosY;
				final double z = Haru.instance.realPosZ / 32.0D - mc.getRenderManager().renderPosZ;
				double widthX = (entity.getEntityBoundingBox().maxX - entity.getEntityBoundingBox().minX) / 2 + 0.05;
				double widthZ = (entity.getEntityBoundingBox().maxZ - entity.getEntityBoundingBox().minZ) / 2 + 0.05;
				double height = (entity.getEntityBoundingBox().maxY - entity.getEntityBoundingBox().minY);

				if (entity instanceof EntityPlayer)
					height *= 1.1;
				pre3D();
				glColor(getColor(Theme.getMainColor()));
				for (int i = 0; i < 2; i++) {
					if (i == 1)
						glColor(getColor(Color.black));
					GL11.glLineWidth(3 - i * 2);
					GL11.glBegin(GL11.GL_LINE_STRIP);
					GL11.glVertex3d(x - widthX, y, z - widthZ);
					GL11.glVertex3d(x - widthX, y, z - widthZ);
					GL11.glVertex3d(x - widthX, y + height, z - widthZ);
					GL11.glVertex3d(x + widthX, y + height, z - widthZ);
					GL11.glVertex3d(x + widthX, y, z - widthZ);
					GL11.glVertex3d(x - widthX, y, z - widthZ);
					GL11.glVertex3d(x - widthX, y, z + widthZ);
					GL11.glEnd();
					GL11.glBegin(GL11.GL_LINE_STRIP);
					GL11.glVertex3d(x + widthX, y, z + widthZ);
					GL11.glVertex3d(x + widthX, y + height, z + widthZ);
					GL11.glVertex3d(x - widthX, y + height, z + widthZ);
					GL11.glVertex3d(x - widthX, y, z + widthZ);
					GL11.glVertex3d(x + widthX, y, z + widthZ);
					GL11.glVertex3d(x + widthX, y, z - widthZ);
					GL11.glEnd();
					GL11.glBegin(GL11.GL_LINE_STRIP);
					GL11.glVertex3d(x + widthX, y + height, z + widthZ);
					GL11.glVertex3d(x + widthX, y + height, z - widthZ);
					GL11.glEnd();
					GL11.glBegin(GL11.GL_LINE_STRIP);
					GL11.glVertex3d(x - widthX, y + height, z + widthZ);
					GL11.glVertex3d(x - widthX, y + height, z - widthZ);
					GL11.glEnd();
				}

				post3D();

			}

		} catch (Exception ex) {

		}
	}
	
	private void glColor(int hex) {
		float alpha = (hex >> 24 & 0xFF) / 255.0F;
		float red = (hex >> 16 & 0xFF) / 255.0F;
		float green = (hex >> 8 & 0xFF) / 255.0F;
		float blue = (hex & 0xFF) / 255.0F;
		GL11.glColor4f(red, green, blue, alpha);
	}

	private int getColor(Color color) {
		return getColor(color.getRed(), color.getGreen(), color.getBlue(), color.getAlpha());
	}

	private int getColor(int red, int green, int blue, int alpha) {
		int color = 0;
		color |= alpha << 24;
		color |= red << 16;
		color |= green << 8;
		color |= blue;
		return color;
	}

	private void pre3D() {
		GL11.glPushMatrix();
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
		GL11.glShadeModel(GL11.GL_SMOOTH);
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		GL11.glEnable(GL11.GL_LINE_SMOOTH);
		GL11.glDisable(GL11.GL_DEPTH_TEST);
		GL11.glDisable(GL11.GL_LIGHTING);
		GL11.glDepthMask(false);
		GL11.glHint(GL11.GL_LINE_SMOOTH_HINT, GL11.GL_NICEST);
	}

	private void post3D() {
		GL11.glDepthMask(true);
		GL11.glEnable(GL11.GL_DEPTH_TEST);
		GL11.glDisable(GL11.GL_LINE_SMOOTH);
		GL11.glEnable(GL11.GL_TEXTURE_2D);
		GL11.glDisable(GL11.GL_BLEND);
		GL11.glPopMatrix();
		GL11.glColor4f(1, 1, 1, 1);
	}

	@EventLink
	public void onStartGame(StartGameEvent e) {
		this.disable();
	}

	@EventLink
	public void onShutdown(ShutdownEvent e) {
		this.disable();
	}
}
