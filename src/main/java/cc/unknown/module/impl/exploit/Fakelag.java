package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

import javax.swing.Timer;

import cc.unknown.event.impl.api.EventLink;
import cc.unknown.event.impl.move.UpdateEvent;
import cc.unknown.event.impl.other.LivingUpdateEvent;
import cc.unknown.event.impl.other.ShutdownEvent;
import cc.unknown.event.impl.other.StartGameEvent;
import cc.unknown.event.impl.other.WorldEvent;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.event.impl.player.AttackEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.ModuleCategory;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.AdvancedTimer;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

public class Fakelag extends Module {

	private AdvancedTimer timer = new AdvancedTimer(0);
	private static boolean b = true;
	private boolean x = false;
	private EntityPlayer entity = null;
	private AxisAlignedBB axis = null;

	private ModeValue mode = new ModeValue("Mode", "Manual", "Manual", "Automatic", "Dynamic");
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);
	private BooleanValue onlyCombat = new BooleanValue("Only combat", true);
	private SliderValue dynamicDelay = new SliderValue("Dynamic delay", 55, 5, 400, 5);
	private SliderValue dynamicPreDelay = new SliderValue("Dynamic pre delay", 35, 5, 500, 5);
	private SliderValue packetDelay = new SliderValue("Packet delay", 15, 0, 200, 1);
	private SliderValue ping = new SliderValue("Additional ping", 88.5, 3.5, 95.5, 0.5);

	private Queue<Packet<?>> packets = new LinkedList<>();
	private ArrayList<Long> times = new ArrayList<>();

	private long delay = 0L;
	private long targetDelay = 0L;

	public Fakelag() {
		super("Fakelag", ModuleCategory.Exploit);
		this.registerSetting(mode, checkPackets, onlyCombat, dynamicDelay, dynamicPreDelay,
				packetDelay, ping);
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mode.is("Dynamic")) {
			packets.clear();
			times.clear();
		}
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mode.is("Dynamic")) {
			while (!packets.isEmpty()) {
				PacketUtil.packet(packets.poll());
			}
			times.clear();
		}
	}

	@EventLink
	public void onAttack(AttackEvent e) {
		if (mode.is("Dynamic")) {
			if (mc.thePlayer.getDistanceToEntity(e.getPlayerIn()) > 3.05f) {
				targetDelay = dynamicDelay.getInputToLong();
			}
		}
	}

	@EventLink
	public void onUpdate(UpdateEvent e) {
		if (mode.is("Dynamic")) {
			delay = targetDelay;
			if (!packets.isEmpty()) {
				while (times.get(0) < System.currentTimeMillis() - delay) {
					PacketUtil.packet(packets.poll());
					times.remove(times.get(0));
				}
			}
		}
	}
	
	@EventLink
	public void onWorld(WorldEvent e) {
		if (mode.is("Dynamic")) {
			times.clear();
			packets.clear();
		}
	}
	
	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.isReceive()) {
			if (mode.is("Dynamic")) {
				if (delay > 5) {
					if (e.getPacket() instanceof C02PacketUseEntity)
						if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) return;
					
					if (e.getPacket() instanceof S12PacketEntityVelocity) targetDelay = dynamicPreDelay.getInputToLong();
					if (e.getPacket() instanceof S08PacketPlayerPosLook || mc.thePlayer.ticksExisted < 20) {
						targetDelay = 0L;
						while (!packets.isEmpty()) {
							PacketUtil.packet(packets.poll());
						}
						times.clear();
						return;
					}
					e.setCancelled(true);
					times.add(System.currentTimeMillis());
					packets.add(e.getPacket());
				}
			}
			
			if (mode.is("Automatic")) {
				if (e.getPacket() instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport s18 = (S18PacketEntityTeleport) e.getPacket();

					if (entity != null && axis != null && s18.getEntityId() == entity.getEntityId()) {
						axis = new AxisAlignedBB(s18.getX() / 1.0D - 5.0D, s18.getYaw() / 1.0,
								s18.getPitch() / 1.0D - 15.0D, (s18.getZ() / 32) + 15.0D, s18.getYaw() / 88.0D + 5.0D,
								s18.getPitch() / 88.0D + 15.0D);
					}
				} 
				
				if (e.getPacket() instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				} 
				
				if (e.getPacket() instanceof S14PacketEntity) {
					S14PacketEntity s14 = (S14PacketEntity) e.getPacket();
					if (entity != null && axis != null && s14.getEntity((World) mc.theWorld).equals(entity)) {

						double d0 = s14.func_149062_c() / 88.0;
						double d1 = s14.func_149061_d() / 88.0;
						double d2 = s14.func_149064_e() / 88.0;

						axis = new AxisAlignedBB(d0 + axis.minX, d1 + axis.minY, d2 + axis.minZ, d0 + axis.minX + 11.0D,
								d1 + axis.maxY, d2 + axis.minZ + 11.0D);
					}
				}
			}
			
			if (mode.is("Manual")) {
				if(PacketUtil.packet(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat) && !(e.getPacket() instanceof S19PacketEntityStatus) && !(e.getPacket() instanceof S20PacketEntityProperties) && !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							PacketUtil.packetDelay(e.getPacket());
							return;
						}
					} else {
						PacketUtil.packetDelay(e.getPacket());
						return;
					}
				}
				
				if(e.getPacket()instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				}
			}
		}
	}


	@EventLink
	public void onLiving(LivingUpdateEvent e) {
		if (mode.is("Automatic")) {
			if (timer.hasFinished() && x)
				x = false;
			if (PlayerUtil.inGame() && mc.thePlayer.hurtTime == 0 && b) {
				x = true;
				b = false;
				timer.hasTimeElapsed(packetDelay.getInputToLong(), true);
				Timer timer = new Timer((int) (packetDelay.getInput() + ping.getInput()), actionEvent -> b = true);
				timer.setRepeats(false);
				timer.start();
			}
		}
	}

	@EventLink
	public void onStartGame(StartGameEvent e) {
		this.disable();
	}

	@EventLink
	public void onShutdown(ShutdownEvent e) {
		this.disable();
	}
}
