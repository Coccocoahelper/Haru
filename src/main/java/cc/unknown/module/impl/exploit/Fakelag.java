package cc.unknown.module.impl.exploit;

import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.concurrent.LinkedBlockingQueue;

import cc.unknown.event.impl.api.EventLink;
import cc.unknown.event.impl.move.UpdateEvent;
import cc.unknown.event.impl.other.ShutdownEvent;
import cc.unknown.event.impl.other.StartGameEvent;
import cc.unknown.event.impl.other.WorldEvent;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.event.impl.packet.PacketType;
import cc.unknown.event.impl.player.AttackEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.ModuleCategory;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S20PacketEntityProperties;

@SuppressWarnings("unchecked")
public class Fakelag extends Module {

	private ModeValue mode = new ModeValue("Mode", "Dynamic", "Dynamic", "Manual");
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);
	private BooleanValue onlyCombat = new BooleanValue("Only combat", true);
	private SliderValue dynamicDelay = new SliderValue("Dynamic delay", 5000, 400, 5000, 100);
	private SliderValue dynamicPreDelay = new SliderValue("Dynamic pre delay", 3500, 500, 8000, 100);

	private LinkedBlockingQueue<Packet<INetHandlerPlayClient>> packets = new LinkedBlockingQueue<>();
	private ArrayList<Long> times = new ArrayList<>();
	private long delay = 0L;
	private long targetDelay = 0L;

	public Fakelag() {
		super("Fakelag", ModuleCategory.Exploit);
		this.registerSetting(mode, checkPackets, onlyCombat, dynamicDelay, dynamicPreDelay);
	}

	@Override
	public void onEnable() {
		if (mode.is("Dynamic")) {
			packets.clear();
			times.clear();
		}
	}

	@Override
	public void onDisable() {
		if (mode.is("Dynamic")) {
			while (!packets.isEmpty()) {
				try {
					PacketUtil.handlePacket((Packet<? extends INetHandlerPlayClient>) packets.take());
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			packets.clear();
			times.clear();
		}
	}

	@EventLink
	public void onAttack(AttackEvent e) {
		if (mc.thePlayer.getDistanceToEntity(e.getTarget()) > 2.6f) {
			targetDelay = dynamicDelay.getInputToLong();
		}
	}

	@EventLink
	public void onUpdate(UpdateEvent e) {
		if (mode.is("Dynamic")) {
			delay = targetDelay;
			if (!packets.isEmpty()) {
				while (times.get(0) < System.currentTimeMillis() - delay) {
					try {
						PacketUtil.handlePacket((Packet<? extends INetHandlerPlayClient>) packets.take());
					} catch (InterruptedException xe) {
						xe.printStackTrace();
					}
					times.remove(times.get(0));
				}
			}
		}
	}

	@EventLink
	public void onWorld(WorldEvent e) {
		if (mode.is("Dynamic")) {
			times.clear();
			packets.clear();
		}
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == PacketType.Receive) {
			if (mode.is("Manual")) {
				if (PacketUtil.packets(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat)
								&& !(e.getPacket() instanceof S19PacketEntityStatus)
								&& !(e.getPacket() instanceof S20PacketEntityProperties)
								&& !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							PacketUtil.packetDelay(e.getPacket());
							return;
						}
					} else {
						PacketUtil.packetDelay(e.getPacket());
						return;
					}
				}

				if (e.getPacket() instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled()
							&& ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				}
			}
		}
		
		if (e.getType() == PacketType.Send) {
			if (mode.is("Dynamic")) {
				if (e.getPacket().getClass().getName().contains("net.minecraft.network.play.server.*")) {
					if (e.getPacket() instanceof S12PacketEntityVelocity)
						targetDelay = dynamicPreDelay.getInputToLong();
					if (e.getPacket() instanceof S08PacketPlayerPosLook || mc.thePlayer.ticksExisted < 20) {
						targetDelay = 0L;
						while (!packets.isEmpty()) {
							try {
								PacketUtil.handlePacket((Packet<? extends INetHandlerPlayClient>) packets.take());
							} catch (InterruptedException xe) {
								xe.printStackTrace();
							}
						}
						times.clear();
						return;
					}

					e.setCancelled(true);
					times.add(System.currentTimeMillis());
					if (e.getPacket() instanceof Packet<?>) {
						Class<?> o = (Class<?>) ((ParameterizedType) ((Packet<?>) e.getPacket()).getClass()
								.getGenericInterfaces()[0]).getActualTypeArguments()[0];
						if (o.equals(INetHandlerPlayClient.class)) {
							packets.add((Packet<INetHandlerPlayClient>) e.getPacket());
						}
					}
				}
			}
		}
	}

	@EventLink
	public void onStartGame(StartGameEvent e) {
		this.disable();
	}

	@EventLink
	public void onShutdown(ShutdownEvent e) {
		this.disable();
	}

}
