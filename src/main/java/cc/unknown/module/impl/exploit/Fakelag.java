package cc.unknown.module.impl.exploit;

import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

import cc.unknown.event.impl.api.EventLink;
import cc.unknown.event.impl.move.UpdateEvent;
import cc.unknown.event.impl.other.ShutdownEvent;
import cc.unknown.event.impl.other.StartGameEvent;
import cc.unknown.event.impl.other.WorldEvent;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.event.impl.packet.PacketType;
import cc.unknown.event.impl.player.PreTickEvent;
import cc.unknown.module.Module;
import cc.unknown.module.impl.ModuleCategory;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.AdvancedTimer;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

public class Fakelag extends Module {

	private ModeValue mode = new ModeValue("Mode", "Dynamic", "Dynamic", "Manual", "Automatic");
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);
	private SliderValue dynamicDelay = new SliderValue("Dynamic delay", 5000, 400, 5000, 100);
	private SliderValue dynamicPreDelay = new SliderValue("Dynamic pre delay", 3500, 500, 8000, 100);
	private SliderValue packetDelay = new SliderValue("Packet delay", 15, 5, 20, 1);
	private SliderValue ping = new SliderValue("Additional ping", 88.5, 3.5, 95.5, 0.5);
	
	private AdvancedTimer timer = new AdvancedTimer(0);
	private EntityPlayer entity = null;
	private AxisAlignedBB axis = null;

	public Fakelag() {
		super("Fakelag", ModuleCategory.Exploit);
		this.registerSetting(mode, checkPackets, dynamicDelay, dynamicPreDelay, packetDelay, ping);
	}

	@Override
	public void onEnable() {
	}

	@Override
	public void onDisable() {

	}

	@EventLink
	public void onUpdate(UpdateEvent e) {
		if (mode.is("Dynamic")) {

		}
	}

	@EventLink
	public void onWorld(WorldEvent e) {

	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.getType() == PacketType.Receive) {
			if (mode.is("Manual")) {
				if (PacketUtil.packets(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat)
								&& !(e.getPacket() instanceof S19PacketEntityStatus)
								&& !(e.getPacket() instanceof S20PacketEntityProperties)
								&& !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							PacketUtil.packetDelay(e.getPacket());
							return;
						}
					} else {
						PacketUtil.packetDelay(e.getPacket());
						return;
					}
				}
			}

			if (mode.is("Automatic")) {
				if (e.getPacket() instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport s18 = (S18PacketEntityTeleport) e.getPacket();

					if (entity != null && axis != null && s18.getEntityId() == entity.getEntityId()) {
						axis = new AxisAlignedBB(s18.getX() / 1.0D - 5.0D, s18.getYaw() / 1.0,
								s18.getPitch() / 1.0D - 15.0D, (s18.getZ() / 32) + 15.0D, s18.getYaw() / 88.0D + 5.0D,
								s18.getPitch() / 88.0D + 15.0D);
					}
				}

				if (e.getPacket() instanceof S14PacketEntity) {
					S14PacketEntity s14 = (S14PacketEntity) e.getPacket();
					if (entity != null && axis != null && s14.getEntity((World) mc.theWorld).equals(entity)) {

						double d0 = s14.func_149062_c() / 88.0;
						double d1 = s14.func_149061_d() / 88.0;
						double d2 = s14.func_149064_e() / 88.0;

						axis = new AxisAlignedBB(d0 + axis.minX, d1 + axis.minY, d2 + axis.minZ, d0 + axis.minX + 11.0D,
								d1 + axis.maxY, d2 + axis.minZ + 11.0D);
					}
				}
			}

			if (mode.is("Dynamic")) {

			}
		}
	}

	@EventLink
	public void onPreTick(PreTickEvent e) {
		if (mode.is("Automatic")) {
			if (timer.hasFinished()) {
				if (PlayerUtil.inGame() && mc.thePlayer.hurtTime == 0) {
					timer.hasTimeElapsed(packetDelay.getInputToLong() + ping.getInputToLong(), true);
				}
			}
		}
	}

	@EventLink
	public void onStartGame(StartGameEvent e) {
		this.disable();
	}

	@EventLink
	public void onShutdown(ShutdownEvent e) {
		this.disable();
	}

}
